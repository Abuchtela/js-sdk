import { ethers } from 'ethers';
import fs from 'fs/promises';
import path from 'path';

const API =
  'https://lit-general-worker.getlit.dev/internal-dev-contract-addresses';

let data;

try {
  data = await fetch(API).then((res) => res.json());
} catch (e) {
  throw new Error(`Error fetching data from ${API}: ${e.toString()}`);
}

// -- prepare
const config = data.config;
const stakingContract = data.data.find((item) => item.name === 'Staking')
  .contracts[0];
console.log('stakingContract', stakingContract);
const address = stakingContract.address_hash;
const abi = stakingContract.ABI;

// -- validate
if (!config) {
  throw new Error('❌ config is undefined');
}
if (!address) {
  throw new Error('❌ address is undefined');
}
if (!abi) {
  throw new Error('❌ abi is undefined');
}

// -- go
const provider = new ethers.providers.JsonRpcProvider(config.rpcUrl);
const contract = new ethers.Contract(address, abi, provider);
console.log('contract', contract);

const configs = await contract.config();
const minNodeCount = configs.minimumValidatorCount.toString();
console.log('✅ minNodeCount', minNodeCount);
const getValidatorsStructsInCurrentEpoch =
  await contract.getValidatorsStructsInCurrentEpoch();
console.log(
  'getValidatorsStructsInCurrentEpoch:',
  getValidatorsStructsInCurrentEpoch
);

const networks = getValidatorsStructsInCurrentEpoch.map((item) => {
  // -- ip
  // Convert integer to binary string and pad with leading zeros to make it 32-bit
  const binaryString = item.ip.toString(2).padStart(32, '0');
  // Split into octets and convert each one to decimal
  const ipArray = [];
  for (let i = 0; i < 32; i += 8) {
    ipArray.push(parseInt(binaryString.substring(i, i + 8), 2));
  }
  // Join the octets with dots to form the IP address
  const ip = ipArray.join('.');

  const address = `http://${ip}:${item.port}`;

  // -- port
  return address;
});

console.log('✅ networks', networks);

const internalPath =
  './packages/constants/src/lib/constants/autogen_internal.ts';

const date = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');

await fs.writeFile(
  internalPath,
  `// Last Modified: ${date} 
  // This file is auto-generated by tools/scripts/gen-internal-dev.mjs
export const INTERNAL_DEV = ${JSON.stringify(networks, null, 2)};

export const INTERNAL_MIN_NODE_COUNT = ${minNodeCount};

export const INTERNAL_DEFAULT_CONFIG = {
  alertWhenUnauthorized: false,
  minNodeCount: ${minNodeCount},
  debug: true,
  bootstrapUrls: ${JSON.stringify(networks, null, 2)},
  litNetwork: 'internalDev',
  connectTimeout: 20000,
};`
);
