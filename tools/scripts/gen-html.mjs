// *******************************************************************************************************
// This script is to generate a HTML file that imports all the built vanilla JS files in the dist folder. 
// Importing it, and console.log the result
// Usage: node tools/scripts/gen-html.mjs
// *******************************************************************************************************

import { exit } from "process";
import { writeFile, getFiles, greenLog} from "./utils.mjs";

// ------ Config ------
const TARGET_DIR = 'apps/html/';
const TARGET_FILE = 'index.html';
const HTML_FILE = TARGET_DIR + TARGET_FILE;
const DIST_DIR = 'dist/packages/';
const globalVarPrefix = 'LitJsSdk_';
const banner = 'THIS FILE IS AUTOMATICALLY GENERATED FROM tools/scripts/gen-html.mjs';

const TEMPLATE = {
    HEADER: `<!-- (DO NOT EDIT!) ${banner}  -->
<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Lit Protocol - Testing imports of bundled SDKs</title>
    </head>
    <body>
    `,
    BODY: '',
    FOOTER: `
    </body>
</html>
`
}



const files = (await getFiles(DIST_DIR))
    .filter((file) => file.includes('vanilla'))
    .map((file) => DIST_DIR + file + '/' + file.split('/').pop().replace('-vanilla', '') + '.js');

const scriptTags = files.map((file) => `        <script src="${file}"></script>`)

let consoleLogs = files.map((file) => { 
    
    let varName = file.split('/').pop().replace('.js', '');
    
    // replace hyphens with underscores and capitalize the first letter
    varName = globalVarPrefix + varName.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
    
    return `if(typeof ${varName} === 'undefined') {console.error("${varName}:", ${varName});}else{console.warn("${varName}:", ${varName});}`;
    // return `console.log("${varName}:", ${varName});`
})

// append the open and close script tags to consolelogs
consoleLogs = consoleLogs.map((log) => `        <script>${log}</script>\n\n`)

TEMPLATE.BODY = banner + '<br/>' + scriptTags.join('\n') + '\n\n' + consoleLogs.join('\n');

await writeFile(HTML_FILE, TEMPLATE.HEADER + TEMPLATE.BODY + TEMPLATE.FOOTER);

greenLog(`Updated ${HTML_FILE}`);
exit();