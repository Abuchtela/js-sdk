import path from 'path';
import { success, fail, testThis } from '../../tools/scripts/utils.mjs';
import LITCONFIG from '../../lit.config.json' assert { type: 'json' };
import { client } from '../00-setup.mjs';
import {
  LitAbility,
  LitAccessControlConditionResource,
} from '@lit-protocol/auth-helpers';
import { LitAuthClient } from '@lit-protocol/lit-auth-client';
import { AuthMethodType, ProviderType } from '@lit-protocol/constants';
import { ethers } from 'ethers';

// NOTE: you need to hash data before you send it in.
// If you send something that isn't 32 bytes, the nodes will return an error.
const TO_SIGN = ethers.utils.arrayify(ethers.utils.keccak256([1, 2, 3, 4, 5]));

export async function main() {
  // ==================== Setup ====================
  const litAuthClient = new LitAuthClient({
    litRelayConfig: {
      relayApiKey: '67e55044-10b1-426f-9247-bb680e5fe0c8_relayer',
    },
    version: 'V3',
    litNodeClient: client,
  });

  const authProvider = litAuthClient.initProvider(ProviderType.EthWallet);

  const authMethod = {
    authMethodType: AuthMethodType.EthWallet,
    accessToken: JSON.stringify(LITCONFIG.CONTROLLER_AUTHSIG),
  };

  const sessionKeyPair = client.getSessionKey();

  // const authNeededCallback = async (params) => {
  //   const response = await client.signSessionKey({
  //     sessionKey: sessionKeyPair,
  //     statement: params.statement,
  //     authMethods: [authMethod],
  //     pkpPublicKey: `0x${LITCONFIG.PKP_PUBKEY}`,
  //     expiration: params.expiration,
  //     resources: params.resources,
  //     chainId: 1,
  //   });
  //   return response.authSig;
  // };

  // ==================== Test Logic ====================
  const sessionSigs = await authProvider?.getSessionSigs({
    pkpPublicKey: `0x${LITCONFIG.PKP_PUBKEY}`,
    authMethod,
    sessionSigsParams: {
      chain: 'ethereum',
      resourceAbilityRequests: [
        {
          resource: new LitAccessControlConditionResource('*'),
          ability: LitAbility.PKPSigning,
        },
      ],
      sessionKey: sessionKeyPair,
      // authNeededCallback,
    },
  });

  console.log('sessionSigs:', sessionSigs);

  const pkpSignRes = await client.pkpSign({
    toSign: TO_SIGN,
    pubKey: LITCONFIG.PKP_PUBKEY,
    sessionSigs: sessionSigs,
  });

  console.log('pkpSignRes:', pkpSignRes);

  // ==================== Post-Validation ====================

  // ==================== Success ====================
  return success(
    'it should use sessionSigs generated by eth wallet auth method to sign data'
  );
}

await testThis({ name: path.basename(import.meta.url), fn: main });
