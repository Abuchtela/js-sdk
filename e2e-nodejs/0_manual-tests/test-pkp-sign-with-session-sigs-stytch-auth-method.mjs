import path from 'path';
import { success, fail, testThis } from '../../tools/scripts/utils.mjs';
import LITCONFIG from '../../lit.config.json' assert { type: 'json' };
import { client } from '../00-setup.mjs';
import { LitAbility, LitActionResource } from '@lit-protocol/auth-helpers';
import { LitAuthClient } from '@lit-protocol/lit-auth-client';
import { AuthMethodType, ProviderType } from '@lit-protocol/constants';
import { ethers } from 'ethers';
import * as stytch from 'stytch';
import { PKPEthersWallet } from '@lit-protocol/pkp-ethers';

// NOTE: you need to hash data before you send it in.
// If you send something that isn't 32 bytes, the nodes will return an error.
const TO_SIGN = ethers.utils.arrayify(ethers.utils.keccak256([1, 2, 3, 4, 5]));

const STYTCH_PROJECT_ID = 'XXX';
const STYTCH_SECRET = 'XXXXX';

export async function main() {
  // ==================== Setup ====================

  const stytchClient = new stytch.Client({
    project_id: STYTCH_PROJECT_ID,
    secret: STYTCH_SECRET,
  });

  if (process.env.SEND_CODE === 'true') {
    const stytchResponse = await stytchClient.otps.email.loginOrCreate({
      email: 'anson@litprotocol.com',
    });

    console.log('stytchResponse:', stytchResponse);
    process.exit();
  }

  const authResponse = await stytchClient.otps.authenticate({
    method_id: 'email-test-08822949-1da2-4b27-866d-90640af9aec4',
    code: process.env.CODE,
    session_duration_minutes: 60 * 24 * 7 * 7,
  });

  const sessionStatus = await stytchClient.sessions.authenticate({
    session_token: authResponse.session_token,
  });

  const litAuthClient = new LitAuthClient({
    litRelayConfig: {
      relayApiKey: '67e55044-10b1-426f-9247-bb680e5fe0c8_relayer',
    },
    version: 'V3',
    litNodeClient: client,
  });

  // -- stytch
  const authProvider = litAuthClient.initProvider(ProviderType.StytchOtp, {
    userId: sessionStatus.session.user_id,
    appId: STYTCH_PROJECT_ID,
  });
  const authMethod = await authProvider.authenticate({
    accessToken: sessionStatus.session_jwt,
  });

  // -- eth wallet
  // const authProvider = litAuthClient.initProvider(ProviderType.EthWallet);
  // const authMethod = {
  //   authMethodType: AuthMethodType.EthWallet,
  //   accessToken: JSON.stringify(LITCONFIG.CONTROLLER_AUTHSIG),
  // };

  console.log('authMethod:', authMethod);

  let pkps = await authProvider.fetchPKPsThroughRelayer(authMethod);

  if (pkps.length <= 0) {
    const mintRes = await authProvider.mintPKPThroughRelayer(authMethod);
    console.log('mintRes:', mintRes);
    pkps = await authProvider.fetchPKPsThroughRelayer(authMethod);
  }

  const pkp = pkps[pkps.length - 1];

  const sessionKeyPair = client.getSessionKey();

  const authNeededCallback = async (params) => {
    const response = await client.signSessionKey({
      sessionKey: sessionKeyPair,
      statement: params.statement,
      // authSig: JSON.parse(authMethod.accessToken),
      authMethods: [authMethod],
      pkpPublicKey: pkp.publicKey,
      expiration: params.expiration,
      resources: params.resources,
      chainId: 1,
    });
    return response.authSig;
  };

  const resourceAbilities = [
    {
      resource: new LitActionResource('*'),
      ability: LitAbility.PKPSigning,
    },
  ];

  // ==================== Test Logic ====================

  const sessionSigs = await client.getSessionSigs({
    chain: 'ethereum',
    expiration: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7).toISOString(),
    resourceAbilityRequests: resourceAbilities,
    sessionKey: sessionKeyPair,
    authNeededCallback,
  });

  console.log('sessionSigs:', sessionSigs);

  const pkpSignRes = await client?.pkpSign({
    toSign: TO_SIGN,
    pubKey: pkp.publicKey,
    sessionSigs: sessionSigs,
    // authMethods: [authMethod],
  });

  console.log('pkpSignRes:', pkpSignRes);

  const pkpWallet = new PKPEthersWallet({
    pkpPubKey: pkp.publicKey,
    rpc: 'https://chain-rpc.litprotocol.com/http',
    controllerSessionSigs: sessionSigs,
  });

  await pkpWallet.init();

  const signature = await pkpWallet.signMessage(TO_SIGN);

  console.log('signature:', signature);

  // ==================== Post-Validation ====================

  // ==================== Success ====================
  return success(
    'it should use sessionSigs generated by eth wallet auth method to sign data'
  );
}

await testThis({ name: path.basename(import.meta.url), fn: main });
